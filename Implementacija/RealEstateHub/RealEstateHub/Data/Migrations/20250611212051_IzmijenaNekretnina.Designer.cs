// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealEstateHub.Data;

#nullable disable

namespace RealEstateHub.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250611212051_IzmijenaNekretnina")]
    partial class IzmijenaNekretnina
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RealEstateHub.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RealEstateHub.Models.FilterNekretnina", b =>
                {
                    b.Property<int>("filterNekretninaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("filterNekretninaId"));

                    b.Property<int>("lokacijaId")
                        .HasColumnType("int");

                    b.Property<int>("maxBrojSoba")
                        .HasColumnType("int");

                    b.Property<double>("maxCijena")
                        .HasColumnType("float");

                    b.Property<int>("maxKvadratura")
                        .HasColumnType("int");

                    b.Property<int>("minBrojSoba")
                        .HasColumnType("int");

                    b.Property<double>("minCijena")
                        .HasColumnType("float");

                    b.Property<int>("minKvadratura")
                        .HasColumnType("int");

                    b.Property<int>("tipNekretnine")
                        .HasColumnType("int");

                    b.HasKey("filterNekretninaId");

                    b.HasIndex("lokacijaId");

                    b.ToTable("FilterNekretnina", (string)null);
                });

            modelBuilder.Entity("RealEstateHub.Models.Korisnik", b =>
                {
                    b.Property<int>("korisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("korisnikId"));

                    b.Property<string>("brojTelefona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("datumPridruzivanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("emailKorisnika")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imeKorisnika")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lozinkaKorisnika")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("prezimeKorisnika")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("korisnikId");

                    b.ToTable("Korisnik", (string)null);
                });

            modelBuilder.Entity("RealEstateHub.Models.Korisnik_Nekretnina", b =>
                {
                    b.Property<int>("kn_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("kn_id"));

                    b.Property<int>("korisnikId")
                        .HasColumnType("int");

                    b.Property<int>("nekretninaId")
                        .HasColumnType("int");

                    b.HasKey("kn_id");

                    b.ToTable("Korisnik_Nekretnina", (string)null);
                });

            modelBuilder.Entity("RealEstateHub.Models.Kriterij", b =>
                {
                    b.Property<int>("kriterijId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("kriterijId"));

                    b.Property<int>("obavjestenjeId")
                        .HasColumnType("int");

                    b.Property<string>("vrijednost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("kriterijId");

                    b.HasIndex("obavjestenjeId")
                        .IsUnique();

                    b.ToTable("Kriterij", (string)null);
                });

            modelBuilder.Entity("RealEstateHub.Models.Lokacija", b =>
                {
                    b.Property<int>("lokacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("lokacijaId"));

                    b.Property<string>("adresa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("grad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("latituda")
                        .HasColumnType("float");

                    b.Property<double>("longituda")
                        .HasColumnType("float");

                    b.Property<int>("nekretninaId")
                        .HasColumnType("int");

                    b.HasKey("lokacijaId");

                    b.HasIndex("nekretninaId")
                        .IsUnique();

                    b.ToTable("Lokacija", (string)null);
                });

            modelBuilder.Entity("RealEstateHub.Models.Nekretnina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrojPregleda")
                        .HasColumnType("int");

                    b.Property<string>("Slika")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VlasnikId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("brojSoba")
                        .HasColumnType("int");

                    b.Property<double>("cijena")
                        .HasColumnType("float");

                    b.Property<double>("kvadratura")
                        .HasColumnType("float");

                    b.Property<string>("naslov")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("opisNekretnine")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("vrstaNekretnine")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VlasnikId");

                    b.ToTable("Nekretnina", (string)null);
                });

            modelBuilder.Entity("RealEstateHub.Models.Obavjestenje", b =>
                {
                    b.Property<int>("obavjestenjeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("obavjestenjeId"));

                    b.Property<DateTime>("datumObavjestenja")
                        .HasColumnType("datetime2");

                    b.Property<int>("korisnikId")
                        .HasColumnType("int");

                    b.Property<string>("poruka")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("obavjestenjeId");

                    b.ToTable("Obavjestenje", (string)null);
                });

            modelBuilder.Entity("RealEstateHub.Models.Oglas", b =>
                {
                    b.Property<int>("oglasId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("oglasId"));

                    b.Property<int>("brojPregleda")
                        .HasColumnType("int");

                    b.Property<DateTime>("datumPostavljanja")
                        .HasColumnType("datetime2");

                    b.Property<bool>("jeAktivan")
                        .HasColumnType("bit");

                    b.Property<int>("nekretninaId")
                        .HasColumnType("int");

                    b.HasKey("oglasId");

                    b.HasIndex("nekretninaId");

                    b.ToTable("Oglas", (string)null);
                });

            modelBuilder.Entity("RealEstateHub.Models.Poruka", b =>
                {
                    b.Property<int>("porukaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("porukaId"));

                    b.Property<DateTime>("datumSlanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("posiljalacId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("primalacId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("procitano")
                        .HasColumnType("bit");

                    b.Property<string>("sadrzaj")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("porukaId");

                    b.HasIndex("posiljalacId");

                    b.HasIndex("primalacId");

                    b.ToTable("Poruka", (string)null);
                });

            modelBuilder.Entity("RealEstateHub.Models.Sesija", b =>
                {
                    b.Property<int>("sesijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("sesijaId"));

                    b.Property<int>("prijavljeniKorisnikkorisnikId")
                        .HasColumnType("int");

                    b.HasKey("sesijaId");

                    b.HasIndex("prijavljeniKorisnikkorisnikId");

                    b.ToTable("Sesija", (string)null);
                });

            modelBuilder.Entity("RealEstateHub.Models.Vlasnik_Nekretnina", b =>
                {
                    b.Property<int>("vn_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("vn_id"));

                    b.Property<int>("nekretninaId")
                        .HasColumnType("int");

                    b.Property<int>("vlasnikId")
                        .HasColumnType("int");

                    b.HasKey("vn_id");

                    b.ToTable("Vlasnik_Nekretnina", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RealEstateHub.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RealEstateHub.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateHub.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RealEstateHub.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateHub.Models.FilterNekretnina", b =>
                {
                    b.HasOne("RealEstateHub.Models.Lokacija", "lokacija")
                        .WithMany()
                        .HasForeignKey("lokacijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lokacija");
                });

            modelBuilder.Entity("RealEstateHub.Models.Kriterij", b =>
                {
                    b.HasOne("RealEstateHub.Models.Obavjestenje", null)
                        .WithOne("kriterij")
                        .HasForeignKey("RealEstateHub.Models.Kriterij", "obavjestenjeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateHub.Models.Lokacija", b =>
                {
                    b.HasOne("RealEstateHub.Models.Nekretnina", "Nekretnina")
                        .WithOne("Lokacija")
                        .HasForeignKey("RealEstateHub.Models.Lokacija", "nekretninaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nekretnina");
                });

            modelBuilder.Entity("RealEstateHub.Models.Nekretnina", b =>
                {
                    b.HasOne("RealEstateHub.Models.ApplicationUser", "Vlasnik")
                        .WithMany()
                        .HasForeignKey("VlasnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vlasnik");
                });

            modelBuilder.Entity("RealEstateHub.Models.Oglas", b =>
                {
                    b.HasOne("RealEstateHub.Models.Nekretnina", "nekretnina")
                        .WithMany()
                        .HasForeignKey("nekretninaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("nekretnina");
                });

            modelBuilder.Entity("RealEstateHub.Models.Poruka", b =>
                {
                    b.HasOne("RealEstateHub.Models.ApplicationUser", "Posiljalac")
                        .WithMany()
                        .HasForeignKey("posiljalacId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstateHub.Models.ApplicationUser", "Primalac")
                        .WithMany()
                        .HasForeignKey("primalacId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Posiljalac");

                    b.Navigation("Primalac");
                });

            modelBuilder.Entity("RealEstateHub.Models.Sesija", b =>
                {
                    b.HasOne("RealEstateHub.Models.Korisnik", "prijavljeniKorisnik")
                        .WithMany()
                        .HasForeignKey("prijavljeniKorisnikkorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("prijavljeniKorisnik");
                });

            modelBuilder.Entity("RealEstateHub.Models.Nekretnina", b =>
                {
                    b.Navigation("Lokacija")
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstateHub.Models.Obavjestenje", b =>
                {
                    b.Navigation("kriterij")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
